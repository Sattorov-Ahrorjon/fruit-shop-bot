from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from utils.misc.redis_service import RedisService
from utils.db_api.views import user_detail
from states.payment import PaymentState
from utils.regex_phone import regex_phone
from keyboards.default.product import products_keyboard
from keyboards.default.payment import (
    pay_type_keyboard, payment_list, driver_time_keyboard,
    location_keyboard
)

router = Router()

_redis = RedisService()
PayText = {
    'uz': "Sizga qanday usulda to'lov qilish qulay ?\n"
          "Berilgan to'lov turlaridan birini tanlang",
    'ru': "–ö–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º –≤–∞–º —É–¥–æ–±–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É ?\n"
          "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∏–¥–æ–≤ –æ–ø–ª–∞—Ç—ã"
}

TimeText = {
    'uz': "Yetkazib berish vaqtini yuboring üöö\n"
          "Masalan 1 aprel 14.00 da üïë.",
    'ru': "–°–æ–æ–±—â–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ üöö\n"
          "–ù–∞–ø—Ä–∏–º–µ—Ä, 1 –∞–ø—Ä–µ–ª—è –≤ 14:00 üïë."
}

LocationText = {
    'uz': "Mahsulotni yetkazib berishimiz uchun joylashuv "
          "malumotingizni berilgan tugma üëá orqali yoki yozma ravishda yuboring",
    'ru': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é "
          "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ üëá –∏–ª–∏ –≤ –ø–∏—Å—å–º–µ–Ω–Ω–æ–º –≤–∏–¥–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç."
}

PhoneText = {
    'uz': "Siz bilan bog'lanishimiz uchun qo'shimcha telefon raqam kiriting.\n"
          "Iltimos berilgan shaklda yuboring +998902223344",
    'ru': "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.\n"
          "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ –¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ +998902223344"
}

DoneText = {
    'uz': "Malumotlar muvaffaqiyatli saqlandi ‚úÖ",
    'ru': "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ"
}


@router.message(lambda msg: msg.text in ("Barchasiga to'lash üí∏", "–ü–ª–∞—Ç–∏—Ç—å –∑–∞ –≤—Å–µ üí∏"))
async def all_to_pay(message: Message, state: FSMContext):
    result = await user_detail(message.from_user.id)
    user_lang = result.get('result').get('language')
    user_basket = _redis.get_user_basket(message.from_user.id)
    if not user_basket:
        await message.answer(
            text={
                'uz': "Sizning savatingiz bo'sh üòï",
                'ru': "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üòï"
            }.get(user_lang)
        )
        return
    answer_text = PayText.get(user_lang)
    await message.answer(
        text=answer_text,
        reply_markup=pay_type_keyboard(user_lang)
    )
    await state.set_state(PaymentState.pay_type)


@router.callback_query(lambda call: call.data.startswith("pay_"))
async def product_to_pay(call: CallbackQuery, state: FSMContext):
    result = await user_detail(call.message.from_user.id)
    user_lang = result.get('result').get('language')
    answer_text = PayText.get(user_lang)
    await call.message.answer(
        text=answer_text,
        reply_markup=pay_type_keyboard(user_lang)
    )
    await state.set_state(PaymentState.pay_type)


@router.message(PaymentState.pay_type, lambda msg: msg.text in payment_list())
async def uz_to_pay(message: Message, state: FSMContext):
    result = await user_detail(message.from_user.id)
    user_lang = result.get('result').get('language')
    answer_text = TimeText.get(user_lang)
    await message.answer(
        text=answer_text,
        reply_markup=driver_time_keyboard(lang=user_lang)
    )
    await state.set_state(PaymentState.deliver_time)


@router.message(PaymentState.deliver_time, lambda msg: msg.text in ("O'tqazib yuborish. ‚û°", "–ü—Ä–æ–ø—É—Å–∫. ‚û°"))
async def transferred_to_location(message: Message, state: FSMContext):
    result = await user_detail(message.from_user.id)
    user_lang = result.get('result').get('language')
    answer_text = LocationText.get(user_lang)
    await message.answer(
        text=answer_text,
        reply_markup=location_keyboard(user_lang)
    )
    await state.set_state(PaymentState.location)


@router.message(PaymentState.location, lambda msg: msg.location is not None)
async def location_create(message: Message, state: FSMContext):
    result = await user_detail(message.from_user.id)
    user_lang = result.get('result').get('language')
    answer_text = PhoneText.get(user_lang)
    await message.answer(
        text=answer_text,
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(PaymentState.phone)


@router.message(PaymentState.phone, lambda msg: msg.text and regex_phone(msg.text))
async def create_phone(message: Message, state: FSMContext):
    result = await user_detail(message.from_user.id)
    user_lang = result.get('result').get('language')
    answer_text = DoneText.get(user_lang)
    await message.answer(
        text=answer_text,
        reply_markup=await products_keyboard(user_lang)
    )
    await state.clear()
